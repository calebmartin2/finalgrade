{"version":3,"sources":["CalcFunc.js","Calc.js","App.js","reportWebVitals.js","index.js"],"names":["CalcFunc","props","currentGrade","finalGrade","className","Math","round","percent","Number","EPSILON","Calc","custom","App","useState","current","setCurrent","final","setFinal","setCustom","type","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAqBeA,MAnBf,SAAkBC,GAChB,MAA2B,KAAvBA,EAAMC,cAA4C,KAArBD,EAAME,WAEnC,qBAAIC,UAAU,aAAd,UACGC,KAAKC,MAMF,MALCL,EAAMM,QAAU,IAChBN,EAAMC,aAAe,KAAQ,EAAID,EAAME,WAAa,OACpDF,EAAME,WAAa,KACpB,IACAK,OAAOC,UAEP,IARN,OAaK,oBAAIL,UAAU,YAAd,8BCyBIM,MAxCf,SAAcT,GACZ,OACE,sBAAKG,UAAU,OAAf,UACE,0CAA8B,KAAjBH,EAAMU,OAAgB,EAAIV,EAAMU,OAA7C,OACA,cAAC,EAAD,CACEJ,QAASN,EAAMU,OACfT,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,aAGpB,wCACA,cAAC,EAAD,CACEI,QAAQ,KACRL,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,aAGpB,wCACA,cAAC,EAAD,CACEI,QAAQ,KACRL,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,aAGpB,wCACA,cAAC,EAAD,CACEI,QAAQ,KACRL,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,aAGpB,wCACA,cAAC,EAAD,CACEI,QAAQ,KACRL,aAAcD,EAAMC,aACpBC,WAAYF,EAAME,iBCEXS,MAnCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGeJ,mBAAS,KAHxB,mBAGNF,EAHM,KAGEO,EAHF,KAKb,OACE,sBAAKd,UAAU,MAAf,UACE,wDACA,uBAAMA,UAAU,YAAhB,UACE,oDACA,uBACEe,KAAK,SACLC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAWO,EAAEC,OAAOH,UAEvC,uBACA,mDACA,uBACED,KAAK,SACLC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOH,UAErC,uBACA,kDACA,uBACED,KAAK,SACLC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOJ,EAAUI,EAAEC,OAAOH,aAGxC,cAAC,EAAD,CAAMlB,aAAcY,EAASX,WAAYa,EAAOL,OAAQA,QCvB/Ca,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.84ed88ed.chunk.js","sourcesContent":["import './index.css'\r\n\r\nfunction CalcFunc(props) {\r\n  if (props.currentGrade !== \"\" && props.finalGrade !== \"\") {\r\n    return (\r\n      <h3 className='CalcOutput'>\r\n        {Math.round(\r\n          (((props.percent / 100 -\r\n            (props.currentGrade / 100) * (1 - props.finalGrade / 100)) /\r\n            (props.finalGrade / 100)) *\r\n            100 +\r\n            Number.EPSILON) *\r\n            100\r\n        ) / 100}\r\n        %\r\n      </h3>\r\n    );\r\n  } else {\r\n    return <h3 className='CalcError'>Input is blank.</h3>;\r\n  }\r\n}\r\nexport default CalcFunc;\r\n","// import { render } from \"@testing-library/react\"\r\nimport CalcFunc from \"./CalcFunc.js\";\r\n\r\nfunction Calc(props) {\r\n  return (\r\n    <div className=\"Calc\">\r\n      <h2>Custom: {props.custom === \"\" ? 0 : props.custom}%</h2>\r\n      <CalcFunc\r\n        percent={props.custom}\r\n        currentGrade={props.currentGrade}\r\n        finalGrade={props.finalGrade}\r\n      />\r\n\r\n      <h2>A 90%:</h2>\r\n      <CalcFunc\r\n        percent=\"90\"\r\n        currentGrade={props.currentGrade}\r\n        finalGrade={props.finalGrade}\r\n      />\r\n\r\n      <h2>B 80%:</h2>\r\n      <CalcFunc\r\n        percent=\"80\"\r\n        currentGrade={props.currentGrade}\r\n        finalGrade={props.finalGrade}\r\n      />\r\n\r\n      <h2>C 70%:</h2>\r\n      <CalcFunc\r\n        percent=\"70\"\r\n        currentGrade={props.currentGrade}\r\n        finalGrade={props.finalGrade}\r\n      />\r\n\r\n      <h2>D 60%:</h2>\r\n      <CalcFunc\r\n        percent=\"60\"\r\n        currentGrade={props.currentGrade}\r\n        finalGrade={props.finalGrade}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Calc;\r\n","import \"./App.css\";\nimport Calc from \"./Calc.js\";\nimport React, { useState } from \"react\";\nimport './index.css'\n\nfunction App() {\n  const [current, setCurrent] = useState(90);\n  const [final, setFinal] = useState(20);\n  const [custom, setCustom] = useState(100);\n\n  return (\n    <div className=\"App\">\n      <h1>Final Grade Calculator</h1>\n      <form className=\"GradeForm\">\n        <label>Current Grade: </label>\n        <input\n          type=\"number\"\n          value={current}\n          onChange={(e) => setCurrent(e.target.value)}\n        />\n        <br></br>\n        <label>Final Weight: </label>\n        <input\n          type=\"number\"\n          value={final}\n          onChange={(e) => setFinal(e.target.value)}\n        />\n        <br></br>\n        <label>Custom Goal: </label>\n        <input\n          type=\"number\"\n          value={custom}\n          onChange={(e) => setCustom(e.target.value)}\n        />\n      </form>\n      <Calc currentGrade={current} finalGrade={final} custom={custom} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}